// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "bannerService/internal/entity"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBanner is a mock of Banner interface.
type MockBanner struct {
	ctrl     *gomock.Controller
	recorder *MockBannerMockRecorder
}

// MockBannerMockRecorder is the mock recorder for MockBanner.
type MockBannerMockRecorder struct {
	mock *MockBanner
}

// NewMockBanner creates a new mock instance.
func NewMockBanner(ctrl *gomock.Controller) *MockBanner {
	mock := &MockBanner{ctrl: ctrl}
	mock.recorder = &MockBannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanner) EXPECT() *MockBannerMockRecorder {
	return m.recorder
}

// CreateBanner mocks base method.
func (m *MockBanner) CreateBanner(ctx context.Context, banner entity.Banner) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBanner", ctx, banner)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBanner indicates an expected call of CreateBanner.
func (mr *MockBannerMockRecorder) CreateBanner(ctx, banner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBanner", reflect.TypeOf((*MockBanner)(nil).CreateBanner), ctx, banner)
}

// FilterBanners mocks base method.
func (m *MockBanner) FilterBanners(ctx context.Context, params entity.BannerFilters) ([]entity.BannerInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterBanners", ctx, params)
	ret0, _ := ret[0].([]entity.BannerInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterBanners indicates an expected call of FilterBanners.
func (mr *MockBannerMockRecorder) FilterBanners(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterBanners", reflect.TypeOf((*MockBanner)(nil).FilterBanners), ctx, params)
}

// UpdateBanner mocks base method.
func (m *MockBanner) UpdateBanner(ctx context.Context, patch map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBanner", ctx, patch)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBanner indicates an expected call of UpdateBanner.
func (mr *MockBannerMockRecorder) UpdateBanner(ctx, patch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBanner", reflect.TypeOf((*MockBanner)(nil).UpdateBanner), ctx, patch)
}

// MockUserBanner is a mock of UserBanner interface.
type MockUserBanner struct {
	ctrl     *gomock.Controller
	recorder *MockUserBannerMockRecorder
}

// MockUserBannerMockRecorder is the mock recorder for MockUserBanner.
type MockUserBannerMockRecorder struct {
	mock *MockUserBanner
}

// NewMockUserBanner creates a new mock instance.
func NewMockUserBanner(ctrl *gomock.Controller) *MockUserBanner {
	mock := &MockUserBanner{ctrl: ctrl}
	mock.recorder = &MockUserBannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserBanner) EXPECT() *MockUserBannerMockRecorder {
	return m.recorder
}

// GetBanner mocks base method.
func (m *MockUserBanner) GetBanner(ctx context.Context, banner entity.UserBanner) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBanner", ctx, banner)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBanner indicates an expected call of GetBanner.
func (mr *MockUserBannerMockRecorder) GetBanner(ctx, banner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBanner", reflect.TypeOf((*MockUserBanner)(nil).GetBanner), ctx, banner)
}

// MockBannerHistory is a mock of BannerHistory interface.
type MockBannerHistory struct {
	ctrl     *gomock.Controller
	recorder *MockBannerHistoryMockRecorder
}

// MockBannerHistoryMockRecorder is the mock recorder for MockBannerHistory.
type MockBannerHistoryMockRecorder struct {
	mock *MockBannerHistory
}

// NewMockBannerHistory creates a new mock instance.
func NewMockBannerHistory(ctrl *gomock.Controller) *MockBannerHistory {
	mock := &MockBannerHistory{ctrl: ctrl}
	mock.recorder = &MockBannerHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBannerHistory) EXPECT() *MockBannerHistoryMockRecorder {
	return m.recorder
}

// GetBannerHistory mocks base method.
func (m *MockBannerHistory) GetBannerHistory(ctx context.Context, id int) (entity.BannerHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBannerHistory", ctx, id)
	ret0, _ := ret[0].(entity.BannerHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBannerHistory indicates an expected call of GetBannerHistory.
func (mr *MockBannerHistoryMockRecorder) GetBannerHistory(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBannerHistory", reflect.TypeOf((*MockBannerHistory)(nil).GetBannerHistory), ctx, id)
}

// SetBannerVersion mocks base method.
func (m *MockBannerHistory) SetBannerVersion(ctx context.Context, id, version int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetBannerVersion", ctx, id, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetBannerVersion indicates an expected call of SetBannerVersion.
func (mr *MockBannerHistoryMockRecorder) SetBannerVersion(ctx, id, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBannerVersion", reflect.TypeOf((*MockBannerHistory)(nil).SetBannerVersion), ctx, id, version)
}

// MockDeletion is a mock of Deletion interface.
type MockDeletion struct {
	ctrl     *gomock.Controller
	recorder *MockDeletionMockRecorder
}

// MockDeletionMockRecorder is the mock recorder for MockDeletion.
type MockDeletionMockRecorder struct {
	mock *MockDeletion
}

// NewMockDeletion creates a new mock instance.
func NewMockDeletion(ctrl *gomock.Controller) *MockDeletion {
	mock := &MockDeletion{ctrl: ctrl}
	mock.recorder = &MockDeletionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeletion) EXPECT() *MockDeletionMockRecorder {
	return m.recorder
}

// AddFeatureToDeletionQueue mocks base method.
func (m *MockDeletion) AddFeatureToDeletionQueue(ctx context.Context, featureId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFeatureToDeletionQueue", ctx, featureId)
}

// AddFeatureToDeletionQueue indicates an expected call of AddFeatureToDeletionQueue.
func (mr *MockDeletionMockRecorder) AddFeatureToDeletionQueue(ctx, featureId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFeatureToDeletionQueue", reflect.TypeOf((*MockDeletion)(nil).AddFeatureToDeletionQueue), ctx, featureId)
}

// AddIdToDeletionQueue mocks base method.
func (m *MockDeletion) AddIdToDeletionQueue(ctx context.Context, id int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddIdToDeletionQueue", ctx, id)
}

// AddIdToDeletionQueue indicates an expected call of AddIdToDeletionQueue.
func (mr *MockDeletionMockRecorder) AddIdToDeletionQueue(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddIdToDeletionQueue", reflect.TypeOf((*MockDeletion)(nil).AddIdToDeletionQueue), ctx, id)
}

// AddTagToDeletionQueue mocks base method.
func (m *MockDeletion) AddTagToDeletionQueue(ctx context.Context, tagId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTagToDeletionQueue", ctx, tagId)
}

// AddTagToDeletionQueue indicates an expected call of AddTagToDeletionQueue.
func (mr *MockDeletionMockRecorder) AddTagToDeletionQueue(ctx, tagId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTagToDeletionQueue", reflect.TypeOf((*MockDeletion)(nil).AddTagToDeletionQueue), ctx, tagId)
}
